-- import the definitions of uniform space via covers
import uniform_structure.covers

-- import the definition of pseudometric space
import pseudometric_space

-- In this exercise we will show that a pseudometric on a set X 
-- gives rise to a distinguished family of covers for X 
-- which make X into a "uniform space in the sense of covers"

-- This is a question about pseudometrics so let's put it
-- in the pseudometric namespace

open set

namespace pseudometric

-- Let X be a set (or a type), and let d be a pseudometric on X
variables {X : Type} (d : X ‚Üí X ‚Üí ‚Ñù) [is_pseudometric d]

-- let's define a closed ball

/-- Closed ball centre x radius Œµ -/
def closed_ball (x : X) (Œµ : ‚Ñù) := {y : X | d x y ‚â§ Œµ}

-- definition of closed ball
lemma mem_closed_ball {x y : X} {Œµ : ‚Ñù} : y ‚àà closed_ball d x Œµ ‚Üî d x y ‚â§ Œµ :=
iff.rfl -- true by definition

-- Here's an obvious lemma: if 0 ‚â§ Œµ then x is in the closed ball centre x
-- and radius Œµ

lemma self_mem_ball (x : X) (Œµ : ‚Ñù) (hŒµ : 0 ‚â§ Œµ) : x ‚àà closed_ball d x Œµ :=
begin
  rw mem_closed_ball,
  rw d_self d,
  assumption
end

-- It's useful to know that the collection of closed balls radius Œµ
-- is a cover. 

def closed_ball_cover (Œµ : ‚Ñù) (hŒµ : 0 ‚â§ Œµ) : cover X :=
{ C := {C : set X | ‚àÉ x : X, C = closed_ball d x Œµ},
  cov := begin
    intro x,
    use closed_ball d x Œµ,
    split,
    { use x},
    { apply self_mem_ball d x Œµ hŒµ,}
  end
}

-- Define Œò to be the set of covers of X with the following property:
-- there exists Œµ ‚â• 0 such that each set in the cover contains a closed ball
-- of radius Œµ (note that Œµ is independent of which set in the cover)

def Œò : set (cover X) :=
  {ùíû | ‚àÉ Œµ (hŒµ : 0 < Œµ), ‚àÄ x : X, ‚àÉ U ‚àà ùíû.C, closed_ball d x Œµ ‚äÜ U}

-- a cover is in Œò iff it's a closed ball cover, or the universal cover
-- the proof is obvious
lemma mem_Œò (ùíû : cover X) : ùíû ‚àà Œò d ‚Üî
  ‚àÉ Œµ (hŒµ : 0 < Œµ), ‚àÄ x : X, ‚àÉ U ‚àà ùíû.C, closed_ball d x Œµ ‚äÜ U := iff.rfl -- true by definition

-- The exerise is to show that the 3 axioms for a distinguished family are
-- satisfied by Œò

-- Axiom 1: the universal cover is in
lemma univ_mem : univ_cover X ‚àà Œò d :=
begin
  rw mem_Œò,
  use 1,
  split, linarith,
  intro x,
  use univ,
  simp [univ_cover],
end

-- Axiom 2 : anything star-bigger than a distinguished cover is distinguished
lemma star_mem (P Q : cover X) (hP : P ‚àà Œò d) (hPQ : P <* Q) : Q ‚àà Œò d :=
begin
  rw mem_Œò at hP ‚ä¢,
  rcases hP with ‚ü®Œµ, hŒµ, hŒµU‚ü©,
  use Œµ,
  split, linarith,
  intro x,
  rcases hŒµU x with ‚ü®V, hV, hŒµV‚ü©,
  rw star_ref_iff at hPQ,
  specialize hPQ V hV,
  rcases hPQ with ‚ü®W, hW, hVW‚ü©,
  use W,
  use hW,
  refine subset.trans hŒµV (hVW V hV _),
  rw ne_empty_iff_nonempty,
  use x,
  simp,
  apply hŒµV,
  rw mem_closed_ball,
  rw d_self d x,
  linarith,
end

-- Axiom 3: two covers have an upper bound in the <* ordering
lemma ub_mem (P Q : cover X) (hP : P ‚àà Œò d) (hQ : Q ‚àà Œò d) :
  ‚àÉ R : cover X, R ‚àà Œò d ‚àß R <* P ‚àß R <* Q :=
begin
  rw mem_Œò at hP hQ,
  rcases hP with ‚ü®ŒµP, hŒµP, hP‚ü©,
  rcases hQ with ‚ü®ŒµQ, hŒµQ, hQ‚ü©,
  have hŒµ : 0 < min ŒµP ŒµQ,
    apply lt_min; linarith,
  set Œµ := min ŒµP ŒµQ / 3 with hŒµ,
  use closed_ball_cover d Œµ (by linarith),
  split,
  { rw mem_Œò,
    use Œµ,
    split, linarith,
    intro x,
    use closed_ball d x Œµ,
    split, swap, refl,
    simp [closed_ball_cover],
    use x,
  },
  split,
  { rw star_ref_iff,
    rintros _ ‚ü®x, rfl‚ü©,
    rcases hP x with ‚ü®U, hUP, hUŒµ‚ü©, -- <- changes to rcases hQ x
    use [U, hUP],
    rintros _ ‚ü®y, rfl‚ü© hxy,
    rw ne_empty_iff_nonempty at hxy,
    rcases hxy with ‚ü®z, hzx, hzy‚ü©,
    refine subset.trans _ hUŒµ,
    intros t hty,
    rw mem_closed_ball at ‚ä¢ hzx hzy hty,
    suffices : d x t ‚â§ 3 * Œµ,
    { refine le_trans this _,
      rw hŒµ,
      convert min_le_left ŒµP ŒµQ, -- <- changes to min_le_right
      linarith,
    },
    calc d x t ‚â§ d x z + d z t : d_triangle d x z t
    ...        ‚â§ d x z + (d z y + d y t) : by linarith [d_triangle d z y t]
    ...        = d x z + (d y z + d y t) : by rw d_comm d z y
    ...        ‚â§ 3 * Œµ : by linarith
  },
  { rw star_ref_iff,
    rintros _ ‚ü®x, rfl‚ü©,
    rcases hQ x with ‚ü®U, hUQ, hUŒµ‚ü©,
    use [U, hUQ],
    rintros _ ‚ü®y, rfl‚ü© hxy,
    rw ne_empty_iff_nonempty at hxy,
    rcases hxy with ‚ü®z, hzx, hzy‚ü©,
    refine subset.trans _ hUŒµ,
    intros t hty,
    rw mem_closed_ball at ‚ä¢ hzx hzy hty,
    suffices : d x t ‚â§ 3 * Œµ,
    { refine le_trans this _,
      rw hŒµ,
      convert min_le_right ŒµP ŒµQ,
      linarith,
    },
    calc d x t ‚â§ d x z + d z t : d_triangle d x z t
    ...        ‚â§ d x z + (d z y + d y t) : by linarith [d_triangle d z y t]
    ...        = d x z + (d y z + d y t) : by rw d_comm d z y
    ...        ‚â§ 3 * Œµ : by linarith
  },
end
 
definition to_cover : dist_covers X :=
{ Œò := Œò d,
  univ_mem := univ_mem d,
  star_mem := star_mem d,
  ub_mem := ub_mem d}

end pseudometric